{"ast":null,"code":"// This is where the super fractionalizer interactions should ideally take place.\nimport { ethers } from \"ethers\";\nimport ERC721 from \"../abi/ERC721.json\";\nimport ISuperFractionalizer from \"../abi/ISuperFractionalizer.json\";\nimport { goerliSuperFractionalizer } from \"../constants\"; // import { Nft, SuperFractionzlier } from 'super-fractionalizer-sdk'\n\nexport async function getSigner(ethereum) {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  return provider.getSigner();\n}\nexport async function nftExists(signer, address, id, chain) {\n  if (chain !== \"goerli\") return false; // if (!(parseInt(id) == id)) return false\n\n  const contract = new ethers.Contract(address, ERC721.abi, signer.provider);\n\n  try {\n    // const uri = await new Nft({ address, chainId: chain }).tokenURI({ tokenId: id, providerOrSigner: signer })\n    await contract.tokenURI(id);\n    return true;\n  } catch (error) {\n    console.error({\n      error\n    });\n    return false;\n  }\n}\nexport async function isApproved(signer, address, id, chain) {\n  if (chain !== \"goerli\") return false;\n  const contract = new ethers.Contract(address, ERC721.abi, signer.provider);\n\n  try {\n    const approvedAddress = await contract.getApproved(id);\n    return approvedAddress.toLowerCase() === goerliSuperFractionalizer.toLowerCase();\n  } catch (error) {\n    console.error({\n      error\n    });\n    return false;\n  }\n}\nexport async function approve(signer, tokenAddress, tokenId) {\n  const contract = new ethers.Contract(tokenAddress, ERC721.abi, signer);\n  console.log({\n    contract\n  });\n\n  try {\n    const tx = await contract.approve(goerliSuperFractionalizer, tokenId);\n    await tx.wait();\n    return true;\n  } catch (error) {\n    console.error({\n      error\n    });\n    return false;\n  }\n}\nexport async function fractionalize(signer, tokenAddress, name, symbol, tokenId, initialSupply) {\n  const superFractionalizer = new ethers.Contract(goerliSuperFractionalizer, ISuperFractionalizer.abi, signer);\n\n  try {\n    const tx = await superFractionalizer.fractionalize(tokenAddress, name, symbol, tokenId, initialSupply);\n    await tx.wait();\n    console.log({\n      tx\n    });\n    return tx;\n  } catch (error) {\n    console.error({\n      error\n    });\n    return null;\n  }\n}","map":{"version":3,"names":["ethers","ERC721","ISuperFractionalizer","goerliSuperFractionalizer","getSigner","ethereum","provider","providers","Web3Provider","nftExists","signer","address","id","chain","contract","Contract","abi","tokenURI","error","console","isApproved","approvedAddress","getApproved","toLowerCase","approve","tokenAddress","tokenId","log","tx","wait","fractionalize","name","symbol","initialSupply","superFractionalizer"],"sources":["/home/rishabh/blockchain-fractionalnft/client/src/helpers/superfractionalizer.js"],"sourcesContent":["// This is where the super fractionalizer interactions should ideally take place.\nimport { ethers } from \"ethers\"\nimport ERC721 from \"../abi/ERC721.json\"\nimport ISuperFractionalizer from \"../abi/ISuperFractionalizer.json\"\nimport { goerliSuperFractionalizer } from \"../constants\"\n\n// import { Nft, SuperFractionzlier } from 'super-fractionalizer-sdk'\n\nexport async function getSigner(ethereum) {\n\tconst provider = new ethers.providers.Web3Provider(ethereum)\n\treturn provider.getSigner()\n}\n\nexport async function nftExists(signer, address, id, chain) {\n\tif (chain !== \"goerli\") return false\n\t// if (!(parseInt(id) == id)) return false\n\n\tconst contract = new ethers.Contract(address, ERC721.abi, signer.provider)\n\ttry {\n\t\t// const uri = await new Nft({ address, chainId: chain }).tokenURI({ tokenId: id, providerOrSigner: signer })\n\t\tawait contract.tokenURI(id)\n\t\treturn true\n\t} catch (error) {\n\t\tconsole.error({ error })\n\t\treturn false\n\t}\n}\n\nexport async function isApproved(signer, address, id, chain) {\n\tif (chain !== \"goerli\") return false\n\tconst contract = new ethers.Contract(address, ERC721.abi, signer.provider)\n\ttry {\n\t\tconst approvedAddress = await contract.getApproved(id)\n\t\treturn (\n\t\t\tapprovedAddress.toLowerCase() ===\n\t\t\tgoerliSuperFractionalizer.toLowerCase()\n\t\t)\n\t} catch (error) {\n\t\tconsole.error({ error })\n\t\treturn false\n\t}\n}\n\nexport async function approve(signer, tokenAddress, tokenId) {\n\tconst contract = new ethers.Contract(tokenAddress, ERC721.abi, signer)\n\tconsole.log({ contract })\n\ttry {\n\t\tconst tx = await contract.approve(goerliSuperFractionalizer, tokenId)\n\t\tawait tx.wait()\n\t\treturn true\n\t} catch (error) {\n\t\tconsole.error({ error })\n\t\treturn false\n\t}\n}\n\nexport async function fractionalize(\n\tsigner,\n\ttokenAddress,\n\tname,\n\tsymbol,\n\ttokenId,\n\tinitialSupply\n) {\n\tconst superFractionalizer = new ethers.Contract(\n\t\tgoerliSuperFractionalizer,\n\t\tISuperFractionalizer.abi,\n\t\tsigner\n\t)\n\ttry {\n\t\tconst tx = await superFractionalizer.fractionalize(\n\t\t\ttokenAddress,\n\t\t\tname,\n\t\t\tsymbol,\n\t\t\ttokenId,\n\t\t\tinitialSupply\n\t\t)\n\t\tawait tx.wait()\n\t\tconsole.log({ tx })\n\t\treturn tx\n\t} catch (error) {\n\t\tconsole.error({ error })\n\t\treturn null\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}